{"version":3,"file":"static/js/783.aa625c2a.chunk.js","mappings":"gKACA,G,QAA0B,0BAA1B,EAAkE,8BAAlE,EAA2G,0BAA3G,EAAiL,wBAAjL,EAAkN,wB,mBCkBlN,EAfmB,SAACA,GAClB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAEE,gBAAKC,UAAWC,EAAhB,UACE,SAAC,KAAD,CAASC,GAAIJ,EAAME,UAAW,qBAAGG,SAA0BF,EAAW,EAAxC,EAA9B,SACGJ,EAAMO,QAId,ECHD,EARgB,SAACP,GACb,OAAO,gBAAKG,UAAWC,EAAhB,SAA2BJ,EAAMQ,SAI3C,E,iDCJKC,GAAcC,EAAAA,EAAAA,IAAiB,IAarC,GAAeC,EAAAA,EAAAA,GAAW,CAACC,KAAM,2BAAjC,EAXuB,SAACZ,GACpB,OACI,kBAAMa,SAAUb,EAAMc,aAAtB,WACA,0BACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,GAAUC,SAAU,CAACC,EAAAA,GAAUV,EAAaW,EAAAA,IAAab,KAAK,iBAAiBc,YAAY,0BAGjH,0BAAK,mBAAQC,KAAK,SAAb,sBAGZ,I,UC6BD,EApCgB,SAACtB,GAEb,IAAIuB,EAAiBvB,EAAMC,KAAKuB,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAYnB,KAAMmB,EAAEnB,KAAML,GAAIwB,EAAExB,IAApC,IAEzCyB,EAAmB3B,EAAMC,KAAK2B,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAASrB,QAASqB,EAAErB,SAAxB,IAQhD,OAAqB,IAAjBR,EAAM8B,QAAyB,SAAC,KAAD,CAAUzB,GAAI,YAI7C,iBAAKF,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKmB,KAIL,iBAAKpB,UAAWC,EAAhB,WACI,yBAAMuB,KACN,SAAC,EAAD,CAAgBd,SAjBR,SAACkB,EAAQC,GACzBhC,EAAMiC,YAAYF,EAAOG,gBACzBF,GAASG,EAAAA,EAAAA,IAAM,2BAClB,SAsBJ,E,oBCCD,GAAeC,E,QAAAA,IACXC,EAAAA,GACAC,EAAAA,EAAAA,KAhBkB,SAACC,GACnB,MAAO,CACHtC,KAAMsC,EAAMC,eAEnB,IAEwB,SAACR,GACtB,MAAO,CACHC,YAAa,SAACC,GACVF,GAASS,EAAAA,EAAAA,GAAmBP,GAC/B,EAER,IAED,CAGEQ,E","sources":["webpack://my-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__-er-F\",\"dialogsItems\":\"Dialogs_dialogsItems__HkM4k\",\"messages\":\"Dialogs_messages__FbgSR\",\"message\":\"Dialogs_message__52PEF\",\"dialog\":\"Dialogs_dialog__VTszD\",\"active\":\"Dialogs_active__IFRI+\"};","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n  let path = \"/dialogs/\" + props.id;\r\n  \r\n  return (\r\n    \r\n    <div className={s.dialog}>\r\n      <NavLink to={path} className={({ isActive }) => isActive ? s.active : \"\"\r\n      }>{props.name}</NavLink>\r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\n\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.dialog}>{props.message}\r\n   \r\n      \r\n    </div>\r\n}\r\n\r\n\r\nexport default Message;","import React from \"react\";\r\nimport { Field, reduxForm, reset } from \"redux-form\";\r\nimport { Textarea } from \"../common/FormsControls/FormsControls\";\r\nimport { maxLengthCreator, required, minLength2 } from \"../../utils/validators/validators\";\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return(\r\n        <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea} validate={[required, maxLength50, minLength2]} name=\"newMessageBody\" placeholder=\"Enter your message\"/>\r\n       </div>\r\n\r\n        <div><button type=\"submit\">Send</button></div>\r\n    </form>\r\n    )\r\n}\r\nexport default reduxForm ({form: \"dialog-add-message-form\"})(AddMessageForm);","import React from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport { Navigate } from \"react-router-dom\";\r\nimport AddMessageForm from \"./AddMessageForm\";\r\nimport { reset } from 'redux-form';\r\n\r\n\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let dialogElements = props.path.dialogs.map(d => <DialogItem name={d.name} id={d.id} />);\r\n\r\n    let messagesElements = props.path.messages.map(m => <Message message={m.message} />);\r\n\r\n\r\n    let addNewMessage = (values, dispatch) => {\r\n        props.sendMessage(values.newMessageBody)\r\n        dispatch(reset(\"dialog-add-message-form\")); //очищаем форму\r\n    }\r\n\r\n    if (props.isAuth === false) return <Navigate to={\"/Login\"} />\r\n\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogElements}\r\n\r\n            </div>\r\n\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageForm onSubmit={addNewMessage} />\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default Dialogs;","import { sendMessageCreator } from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\n\r\n// const DialogsContainer = () => {\r\n\r\n//     return (\r\n//         <StoreContext.Consumer>\r\n//             {\r\n//             (state) => {\r\n//   ;\r\n//                 let onSendMessageClick = () => {\r\n//                     store.dispatch(sendMessageCreator());\r\n//                 }\r\n\r\n//                 let onNewMessageChange = (body) => {\r\n//                     store.dispatch(updateNewMessageBodyCreator(body));\r\n//                 }\r\n\r\n//                 return <Dialogs updateNewMessageBody={onNewMessageChange} sendMessage={onSendMessageClick} path={state.dialogsReducer} />\r\n//             }\r\n// }\r\n//         </StoreContext.Consumer>\r\n//     )\r\n// }\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        path: state.dialogsReducer,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    withAuthRedirect,\r\n    connect(mapStateToProps, mapDispatchToProps)\r\n)(Dialogs);\r\n\r\n"],"names":["props","path","id","className","s","to","isActive","name","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","minLength2","placeholder","type","dialogElements","dialogs","map","d","messagesElements","messages","m","isAuth","values","dispatch","sendMessage","newMessageBody","reset","compose","withAuthRedirect","connect","state","dialogsReducer","sendMessageCreator","Dialogs"],"sourceRoot":""}